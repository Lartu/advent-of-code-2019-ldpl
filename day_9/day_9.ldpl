using package std-list

data:
code is text

procedure:
load file "input.txt" in code
display "Code loaded." lf
call execute_intcode

# --- Sub that interprets IntCode ---
sub execute_intcode
    local data:
        opcodes is text list
        op1 is number
        op2 is number
        res is number
        opcode_count is number
        i is number
        indexA is number
        indexB is number
        indexRes is number
        par_modes is text list
        orig_opcode is text
        opc_len is number
        auxA is number
        auxB is number
        char is text
        opcode_parsed is text
        mode is number
        par_len is number
        relative_base is number
        
    procedure:
        # --- Get all code tokens ---
        split code by "," in opcodes
        for i from 0 to 100000 step 1 do
            push "0" to opcodes
        repeat
        get length of opcodes in opcode_count

        store 0 in i
        # --- For each token ---
        while 1 is equal to 1 do
            clear par_modes
            # --- Trim the opcode and get its parameter modes ---
            trim opcodes:i in orig_opcode
            get length of orig_opcode in opc_len
            in auxA solve opc_len - 1
            in auxB solve opc_len - 2
            # -> Get the opcode
            if opc_len is greater than 1 then
                get character at auxB from orig_opcode in char
                substring orig_opcode from auxB length 2 in opcode_parsed
                substring orig_opcode from 0 length auxB in orig_opcode
                # -> Get every parameter
                while 1 is equal to 1 do
                    get length of orig_opcode in opc_len
                    if opc_len is greater than 0 then
                        in auxA solve opc_len - 1
                        get character at auxA from orig_opcode in char
                        substring orig_opcode from 0 length auxA in orig_opcode
                        push char to par_modes
                    else
                        break
                    end if
                repeat
            else
                store orig_opcode in opcode_parsed
            end if
            display crlf
            display "Original opcode: " opcodes:i " -> opc is " opcode_parsed " (index " i ")"
            display " (relative base " relative_base ")" crlf
            display "  Parameters: "
            for each char in par_modes do
                display char " "
            repeat
            display crlf
            
            # --- Remove trailing 0s ---
            store opcode_parsed in op1
            store op1 in opcode_parsed
            
            # --- Execute the opcode ---
            # ADD
            if opcode_parsed is equal to "1" then    
                display "  ADD "
                # --- First operand    
                in i solve i + 1
                get length of par_modes in par_len
                store 0 in mode
                if par_len is greater than 0 then
                    store par_modes:0 in mode
                    splice element 0 of list par_modes
                end if
                if mode is equal to 0 then
                    trim opcodes:i in opcodes:i
                    store opcodes:i in indexA
                    trim opcodes:indexA in opcodes:indexA
                    store opcodes:indexA in op1
                    display "pos "
                else if mode is equal to 1 then
                    trim opcodes:i in opcodes:i
                    store opcodes:i in op1
                    store -1 in indexA
                    display "imm "
                else if mode is equal to 2 then
                    trim opcodes:i in opcodes:i
                    store opcodes:i in indexA
                    in indexA solve indexA + relative_base
                    trim opcodes:indexA in opcodes:indexA
                    store opcodes:indexA in op1
                    display "off "
                end if
                # --- Second operand
                in i solve i + 1
                get length of par_modes in par_len
                store 0 in mode
                if par_len is greater than 0 then
                    store par_modes:0 in mode
                    splice element 0 of list par_modes
                end if
                if mode is equal to 0 then
                    trim opcodes:i in opcodes:i
                    store opcodes:i in indexB
                    trim opcodes:indexB in opcodes:indexB
                    store opcodes:indexB in op2
                    display "pos "
                else if mode is equal to 1 then
                    trim opcodes:i in opcodes:i
                    store opcodes:i in op2
                    store -1 in indexB
                    display "imm "
                else if mode is equal to 2 then
                    trim opcodes:i in opcodes:i
                    store opcodes:i in indexB
                    in indexB solve indexB + relative_base
                    trim opcodes:indexB in opcodes:indexB
                    store opcodes:indexB in op2
                    display "off "
                end if
                # --- Result operand
                in i solve i + 1
                get length of par_modes in par_len
                store 0 in mode
                if par_len is greater than 0 then
                    store par_modes:0 in mode
                    splice element 0 of list par_modes
                end if
                if mode is equal to 0 then
                    trim opcodes:i in opcodes:i
                    store opcodes:i in indexRes
                    display "pos "
                else if mode is equal to 2 then
                    trim opcodes:i in opcodes:i
                    store opcodes:i in indexRes
                    in indexRes solve indexRes + relative_base
                end if
                # --- Execute
                in res solve op1 + op2
                display crlf "  " op1 " (at " indexA ") + " op2 " (at " indexB ") = " res " (at " indexRes ")" crlf
                store res in opcodes:indexRes
                in i solve i + 1
                
            # MUL
            else if opcode_parsed is equal to "2" then        
                display "  MUL "
                # --- First operand    
                in i solve i + 1
                get length of par_modes in par_len
                store 0 in mode
                if par_len is greater than 0 then
                    store par_modes:0 in mode
                    splice element 0 of list par_modes
                end if
                if mode is equal to 0 then
                    trim opcodes:i in opcodes:i
                    store opcodes:i in indexA
                    trim opcodes:indexA in opcodes:indexA
                    store opcodes:indexA in op1
                    display "pos "
                else if mode is equal to 1 then
                    trim opcodes:i in opcodes:i
                    store opcodes:i in op1
                    display "imm "
                else if mode is equal to 2 then
                    trim opcodes:i in opcodes:i
                    store opcodes:i in indexA
                    in indexA solve indexA + relative_base
                    trim opcodes:indexA in opcodes:indexA
                    store opcodes:indexA in op1
                    display "rel "
                end if
                # --- Second operand
                in i solve i + 1
                get length of par_modes in par_len
                store 0 in mode
                if par_len is greater than 0 then
                    store par_modes:0 in mode
                    splice element 0 of list par_modes
                end if
                if mode is equal to 0 then
                    trim opcodes:i in opcodes:i
                    store opcodes:i in indexB
                    trim opcodes:indexB in opcodes:indexB
                    store opcodes:indexB in op2
                    display "pos "
                else if mode is equal to 1 then
                    trim opcodes:i in opcodes:i
                    store opcodes:i in op2
                    display "imm "
                else if mode is equal to 2 then
                    trim opcodes:i in opcodes:i
                    store opcodes:i in indexB
                    in indexB solve indexB + relative_base
                    trim opcodes:indexB in opcodes:indexB
                    store opcodes:indexB in op2
                    display "rel "
                end if
                # --- Result operand
                in i solve i + 1
                get length of par_modes in par_len
                store 0 in mode
                if par_len is greater than 0 then
                    store par_modes:0 in mode
                    splice element 0 of list par_modes
                end if
                if mode is equal to 0 then
                    trim opcodes:i in opcodes:i
                    store opcodes:i in indexRes
                    display "pos "
                else if mode is equal to 2 then
                    trim opcodes:i in opcodes:i
                    store opcodes:i in indexRes
                    in indexRes solve indexRes + relative_base
                end if
                # --- Execute
                in res solve op1 * op2
                display crlf "  " op1 " (at " indexA ") * " op2 " (at " indexB ") = " res " (at " indexRes ")" crlf
                store res in opcodes:indexRes
                in i solve i + 1
                
            # ACCEPT
            else if opcode_parsed is equal to "3" then        
                display "  ACCEPT: "
                accept res
                # --- First operand    
                in i solve i + 1
                get length of par_modes in par_len
                store 0 in mode
                if par_len is greater than 0 then
                    store par_modes:0 in mode
                    splice element 0 of list par_modes
                end if
                if mode is equal to 0 then
                    trim opcodes:i in opcodes:i
                    store opcodes:i in indexA
                else if mode is equal to 2 then
                    display "  Accepting in relative mode" lf
                    trim opcodes:i in opcodes:i
                    store opcodes:i in indexA                    
                    display "  Index: " indexA lf             
                    display "  Relative Base: " relative_base lf
                    in indexA solve indexA + relative_base                   
                    display "  Resulting index: " indexA lf
                end if
                # --- Execute
                display "  Stored " res " into index " indexA crlf
                store res in opcodes:indexA
                in i solve i + 1
                
            # PRINT
            else if opcode_parsed is equal to "4" then        
                display "  PRINT "
                # --- First operand    
                in i solve i + 1
                get length of par_modes in par_len
                store 0 in mode
                if par_len is greater than 0 then
                    store par_modes:0 in mode
                    splice element 0 of list par_modes
                end if
                if mode is equal to 0 then
                    trim opcodes:i in opcodes:i
                    store opcodes:i in indexA
                    trim opcodes:indexA in opcodes:indexA
                    store opcodes:indexA in op1
                    display "pos "
                else if mode is equal to 1 then
                    trim opcodes:i in opcodes:i
                    store opcodes:i in op1
                    store -1 in indexA
                    display "imm "
                else if mode is equal to 2 then
                    trim opcodes:i in opcodes:i
                    store opcodes:i in indexA
                    in indexA solve indexA + relative_base
                    trim opcodes:indexA in opcodes:indexA
                    store opcodes:indexA in op1
                    display "off "
                end if
                in i solve i + 1
                display crlf "  VALUE: " op1 " (at " indexA ")" crlf
                
            # JUMP IF TRUE
            else if opcode_parsed is equal to "5" then        
                display "  JUMP IF TRUE "
                # --- First operand    
                in i solve i + 1
                get length of par_modes in par_len
                store 0 in mode
                if par_len is greater than 0 then
                    store par_modes:0 in mode
                    splice element 0 of list par_modes
                end if
                if mode is equal to 0 then
                    trim opcodes:i in opcodes:i
                    store opcodes:i in indexA
                    trim opcodes:indexA in opcodes:indexA
                    store opcodes:indexA in op1
                    display "pos "
                else if mode is equal to 1 then
                    trim opcodes:i in opcodes:i
                    store opcodes:i in op1
                    display "imm "
                else if mode is equal to 2 then
                    trim opcodes:i in opcodes:i
                    store opcodes:i in indexA
                    in indexA solve indexA + relative_base
                    trim opcodes:indexA in opcodes:indexA
                    store opcodes:indexA in op1
                    display "rel "
                end if
                # --- Second operand
                in i solve i + 1
                get length of par_modes in par_len
                store 0 in mode
                if par_len is greater than 0 then
                    store par_modes:0 in mode
                    splice element 0 of list par_modes
                end if
                if mode is equal to 0 then
                    trim opcodes:i in opcodes:i
                    store opcodes:i in indexB
                    trim opcodes:indexB in opcodes:indexB
                    store opcodes:indexB in op2
                    display "pos "
                else if mode is equal to 1 then
                    trim opcodes:i in opcodes:i
                    store opcodes:i in op2
                    display "imm "
                else if mode is equal to 2 then
                    trim opcodes:i in opcodes:i
                    store opcodes:i in indexB
                    in indexB solve indexB + relative_base
                    trim opcodes:indexB in opcodes:indexB
                    store opcodes:indexB in op2
                    display "rel "
                end if
                
                display crlf "  if " op1 " (at " indexA ") != 0 jumps to " op2 " (at " indexB ")"
                
                # --- Execute
                if op1 is not equal to 0 then
                    store op2 in i
                    display " => Jumps" crlf
                else
                    in i solve i + 1
                    display " => Doesn't Jump" crlf
                end if
            
            # JUMP IF FALSE
            else if opcode_parsed is equal to "6" then        
                display "  JUMP IF FALSE "
                # --- First operand    
                in i solve i + 1
                get length of par_modes in par_len
                store 0 in mode
                if par_len is greater than 0 then
                    store par_modes:0 in mode
                    splice element 0 of list par_modes
                end if
                if mode is equal to 0 then
                    trim opcodes:i in opcodes:i
                    store opcodes:i in indexA
                    trim opcodes:indexA in opcodes:indexA
                    store opcodes:indexA in op1
                    display "pos "
                else if mode is equal to 1 then
                    trim opcodes:i in opcodes:i
                    store opcodes:i in op1
                    store -1 in indexA
                    display "imm "
                else if mode is equal to 2 then
                    trim opcodes:i in opcodes:i
                    store opcodes:i in indexA
                    in indexA solve indexA + relative_base
                    trim opcodes:indexA in opcodes:indexA
                    store opcodes:indexA in op1
                    display "rel "
                end if
                # --- Second operand
                in i solve i + 1
                get length of par_modes in par_len
                store 0 in mode
                if par_len is greater than 0 then
                    store par_modes:0 in mode
                    splice element 0 of list par_modes
                end if
                if mode is equal to 0 then
                    trim opcodes:i in opcodes:i
                    store opcodes:i in indexB
                    trim opcodes:indexB in opcodes:indexB
                    store opcodes:indexB in op2
                    display "pos "
                else if mode is equal to 1 then
                    trim opcodes:i in opcodes:i
                    store opcodes:i in op2
                    display "imm "
                else if mode is equal to 2 then
                    trim opcodes:i in opcodes:i
                    store opcodes:i in indexb
                    in indexB solve indexB + relative_base
                    trim opcodes:indexB in opcodes:indexB
                    store opcodes:indexB in op2
                    display "rel "
                end if
                
                display crlf "  if " op1 " (at " indexA ") != 1 jumps to " op2 " (at " indexB ")"
                
                # --- Execute
                if op1 is equal to 0 then
                    store op2 in i
                    display " => Jumps" crlf
                else
                    in i solve i + 1
                    display " => Doesn't Jump" crlf
                end if
                
            # LT
            else if opcode_parsed is equal to "7" then        
                display "  LT "
                # --- First operand    
                in i solve i + 1
                get length of par_modes in par_len
                store 0 in mode
                if par_len is greater than 0 then
                    store par_modes:0 in mode
                    splice element 0 of list par_modes
                end if
                if mode is equal to 0 then
                    trim opcodes:i in opcodes:i
                    store opcodes:i in indexA
                    trim opcodes:indexA in opcodes:indexA
                    store opcodes:indexA in op1
                    display "pos "
                else if mode is equal to 1 then
                    trim opcodes:i in opcodes:i
                    store opcodes:i in op1
                    store -1 in indexA
                    display "imm "
                else if mode is equal to 2 then
                    trim opcodes:i in opcodes:i
                    store opcodes:i in indexA
                    in indexA solve indexA + relative_base
                    trim opcodes:indexA in opcodes:indexA
                    store opcodes:indexA in op1
                    display "rel "
                end if
                # --- Second operand
                in i solve i + 1
                get length of par_modes in par_len
                store 0 in mode
                if par_len is greater than 0 then
                    store par_modes:0 in mode
                    splice element 0 of list par_modes
                end if
                if mode is equal to 0 then
                    trim opcodes:i in opcodes:i
                    store opcodes:i in indexB
                    trim opcodes:indexB in opcodes:indexB
                    store opcodes:indexB in op2
                    display "pos "
                else if mode is equal to 1 then
                    trim opcodes:i in opcodes:i
                    store opcodes:i in op2
                    store -1 in indexB
                    display "imm "
                else if mode is equal to 2 then
                    trim opcodes:i in opcodes:i
                    store opcodes:i in indexB
                    in indexB solve indexB + relative_base
                    trim opcodes:indexB in opcodes:indexB
                    store opcodes:indexB in op2
                    display "rel "
                end if
                # --- Result operand
                in i solve i + 1
                get length of par_modes in par_len
                store 0 in mode
                if par_len is greater than 0 then
                    store par_modes:0 in mode
                    splice element 0 of list par_modes
                end if
                if mode is equal to 0 then
                    trim opcodes:i in opcodes:i
                    store opcodes:i in indexRes
                    display "pos "
                else if mode is equal to 2 then
                    trim opcodes:i in opcodes:i
                    store opcodes:i in indexRes
                    in indexRes solve indexRes + relative_base
                end if
                # --- Execute
                if op1 is less than op2 then
                    store 1 in res
                else
                    store 0 in res
                end if
                store res in opcodes:indexRes
                in i solve i + 1
                display crlf "  " op1 " (at " indexA ") < " op2 " (at " indexB ") = " res " (at " indexRes ")" crlf
            
            # EQ
            else if opcode_parsed is equal to "8" then        
                display "  EQ "
                # --- First operand    
                in i solve i + 1
                get length of par_modes in par_len
                store 0 in mode
                if par_len is greater than 0 then
                    store par_modes:0 in mode
                    splice element 0 of list par_modes
                end if
                if mode is equal to 0 then
                    trim opcodes:i in opcodes:i
                    store opcodes:i in indexA
                    trim opcodes:indexA in opcodes:indexA
                    store opcodes:indexA in op1
                    display "pos "
                else if mode is equal to 1 then
                    trim opcodes:i in opcodes:i
                    store opcodes:i in op1
                    store -1 in indexA
                    display "imm "
                else if mode is equal to 2 then
                    trim opcodes:i in opcodes:i
                    store opcodes:i in indexA
                    in indexA solve indexA + relative_base
                    trim opcodes:indexA in opcodes:indexA
                    store opcodes:indexA in op1
                    display "rel "
                end if
                # --- Second operand
                in i solve i + 1
                get length of par_modes in par_len
                store 0 in mode
                if par_len is greater than 0 then
                    store par_modes:0 in mode
                    splice element 0 of list par_modes
                end if
                if mode is equal to 0 then
                    trim opcodes:i in opcodes:i
                    store opcodes:i in indexB
                    trim opcodes:indexB in opcodes:indexB
                    store opcodes:indexB in op2
                    display "pos "
                else if mode is equal to 1 then
                    trim opcodes:i in opcodes:i
                    store opcodes:i in op2
                    store -1 in indexB
                    display "imm "
                else if mode is equal to 2 then
                    trim opcodes:i in opcodes:i
                    store opcodes:i in indexB
                    in indexB solve indexB + relative_base
                    trim opcodes:indexB in opcodes:indexB
                    store opcodes:indexB in op2
                    display "rel "
                end if
                # --- Result operand
                in i solve i + 1
                get length of par_modes in par_len
                store 0 in mode
                if par_len is greater than 0 then
                    store par_modes:0 in mode
                    splice element 0 of list par_modes
                end if
                if mode is equal to 0 then
                    trim opcodes:i in opcodes:i
                    store opcodes:i in indexRes
                    display "pos "
                else if mode is equal to 2 then
                    trim opcodes:i in opcodes:i
                    store opcodes:i in indexRes
                    in indexRes solve indexRes + relative_base
                end if
                # --- Execute
                if op1 is equal to op2 then
                    store 1 in res
                else
                    store 0 in res
                end if
                store res in opcodes:indexRes
                in i solve i + 1
                display crlf "  " op1 " (at " indexA ") == " op2 " (at " indexB ") = " res " (at " indexRes ")" crlf

            # ADJUST RELATIVE BASE
            else if opcode_parsed is equal to "9" then
                display "  ADJUST RELATIVE BASE "
                # --- First operand    
                in i solve i + 1
                get length of par_modes in par_len
                store 0 in mode
                if par_len is greater than 0 then
                    store par_modes:0 in mode
                    splice element 0 of list par_modes
                end if
                if mode is equal to 0 then
                    trim opcodes:i in opcodes:i
                    store opcodes:i in indexA
                    trim opcodes:indexA in opcodes:indexA
                    store opcodes:indexA in op1
                    display "pos "
                else if mode is equal to 1 then
                    trim opcodes:i in opcodes:i
                    store opcodes:i in op1
                    display "imm "
                else if mode is equal to 2 then
                    trim opcodes:i in opcodes:i
                    store opcodes:i in indexA
                    in indexA solve indexA + relative_base
                    trim opcodes:indexA in opcodes:indexA
                    store opcodes:indexA in op1
                    display "off "
                end if
                in i solve i + 1
                display crlf
                display "  Changed relative base from " relative_base
                in relative_base solve relative_base + op1
                display " to " relative_base " (at " indexA ")" lf
            else
                display "  HALTED" crlf
                break
            end if
        repeat
end sub

